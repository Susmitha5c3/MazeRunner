{"ast":null,"code":"import _objectSpread from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/susmitha/pathfinding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Node from'./Node/Node';import{dijkstra,getNodesInShortestPathOrder}from'../algorithms/dijkstra';import styles from'./PathfindingVisualizer.module.css';import nodeStyles from'./Node/Node.module.css';var START_NODE_ROW=3;var START_NODE_COL=8;var FINISH_NODE_ROW=15;var FINISH_NODE_COL=44;var PathfindingVisualizer=/*#__PURE__*/function(_Component){_inherits(PathfindingVisualizer,_Component);var _super=_createSuper(PathfindingVisualizer);function PathfindingVisualizer(){var _this;_classCallCheck(this,PathfindingVisualizer);_this=_super.call(this);_this.state={grid:[],mouseIsPressed:false};return _this;}_createClass(PathfindingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){var grid=getInitialGrid();this.setState({grid:grid});}},{key:\"handleMouseDown\",value:function handleMouseDown(row,col){var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid,mouseIsPressed:true});}},{key:\"handleMouseEnter\",value:function handleMouseEnter(row,col){if(!this.state.mouseIsPressed)return;var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid});}},{key:\"handleMouseUp\",value:function handleMouseUp(){this.setState({mouseIsPressed:false});}},{key:\"animateDijkstra\",value:function animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder){var _this2=this;var start=nodesInShortestPathOrder[0];document.getElementById(\"node-\".concat(start.row,\"-\").concat(start.col)).className=\"\".concat(nodeStyles.node,\" \").concat(nodeStyles.nodeStart);var _loop=function _loop(i){if(i===visitedNodesInOrder.length){setTimeout(function(){_this2.animateShortestPath(nodesInShortestPathOrder);},10*i);return{v:void 0};}setTimeout(function(){var node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"\".concat(nodeStyles.node,\" \").concat(nodeStyles.nodeVisited);},10*i);};for(var i=1;i<=visitedNodesInOrder.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}},{key:\"animateShortestPath\",value:function animateShortestPath(nodesInShortestPathOrder){var _loop2=function _loop2(i){setTimeout(function(){var node=nodesInShortestPathOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"\".concat(nodeStyles.node,\" \").concat(nodeStyles.nodeShortestPath);},50*i);};for(var i=1;i<nodesInShortestPathOrder.length-1;i++){_loop2(i);}var start=nodesInShortestPathOrder[0];document.getElementById(\"node-\".concat(start.row,\"-\").concat(start.col)).className=\"\".concat(nodeStyles.node,\" \").concat(nodeStyles.nodeStart);var stop=nodesInShortestPathOrder[nodesInShortestPathOrder.length-1];document.getElementById(\"node-\".concat(stop.row,\"-\").concat(stop.col)).className=\"\".concat(nodeStyles.node,\" \").concat(nodeStyles.nodeFinish);}},{key:\"visualizeDijkstra\",value:function visualizeDijkstra(){var grid=this.state.grid;var startNode=grid[START_NODE_ROW][START_NODE_COL];var finishNode=grid[FINISH_NODE_ROW][FINISH_NODE_COL];var visitedNodesInOrder=dijkstra(grid,startNode,finishNode);var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);this.animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);}},{key:\"clearBoard\",value:function clearBoard(){var grid=this.state.grid;var startNode=grid[START_NODE_ROW][START_NODE_COL];var finishNode=grid[FINISH_NODE_ROW][FINISH_NODE_COL];var visitedNodesInOrder=dijkstra(grid,startNode,finishNode);for(var i=0;i<visitedNodesInOrder.length;i++){var node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"\".concat(nodeStyles.node,\" \").concat(nodeStyles.node);}var start=visitedNodesInOrder[0];document.getElementById(\"node-\".concat(start.row,\"-\").concat(start.col)).className=\"\".concat(nodeStyles.node,\" \").concat(nodeStyles.nodeStart);var stop=visitedNodesInOrder[visitedNodesInOrder.length-1];document.getElementById(\"node-\".concat(stop.row,\"-\").concat(stop.col)).className=\"\".concat(nodeStyles.node,\" \").concat(nodeStyles.nodeFinish);this.componentDidMount();}},{key:\"render\",value:function render(){var _this3=this;var _this$state=this.state,grid=_this$state.grid,mouseIsPressed=_this$state.mouseIsPressed;return/*#__PURE__*/React.createElement(\"body\",{class:styles.body},/*#__PURE__*/React.createElement(\"div\",{class:styles.navbar},/*#__PURE__*/React.createElement(\"ul\",{class:styles.ul},/*#__PURE__*/React.createElement(\"li\",{class:styles.starwarslogo},/*#__PURE__*/React.createElement(\"img\",{src:require('../Images/starwars.png')}),\" \"),/*#__PURE__*/React.createElement(\"li\",{class:styles.text},/*#__PURE__*/React.createElement(\"a\",{class:styles.a,onClick:function onClick(){return window.location.reload();}},\" Maze Runner \")),/*#__PURE__*/React.createElement(\"li\",{class:styles.nav},/*#__PURE__*/React.createElement(\"button\",{class:styles.button,onClick:function onClick(){return _this3.visualizeDijkstra();}},\"Visualize Dijkstra's Algorithm\")),/*#__PURE__*/React.createElement(\"li\",{class:styles.nav},/*#__PURE__*/React.createElement(\"a\",{class:styles.a,onClick:function onClick(){return _this3.clearBoard();}},\"Clear Board\")))),/*#__PURE__*/React.createElement(\"div\",{className:styles.grid},grid.map(function(row,rowIdx){return/*#__PURE__*/React.createElement(\"div\",{key:rowIdx},row.map(function(node,nodeIdx){var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return/*#__PURE__*/React.createElement(Node,{key:nodeIdx,col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseDown:function onMouseDown(row,col){return _this3.handleMouseDown(row,col);},onMouseEnter:function onMouseEnter(row,col){return _this3.handleMouseEnter(row,col);},onMouseUp:function onMouseUp(){return _this3.handleMouseUp();},row:row});}));})),/*#__PURE__*/React.createElement(\"div\",{class:styles.footer},/*#__PURE__*/React.createElement(\"ul\",{class:styles.ul},/*#__PURE__*/React.createElement(\"li\",{class:styles.f},/*#__PURE__*/React.createElement(\"img\",{src:require('../Images/spaceship.png')}),\"    Start Node\"),/*#__PURE__*/React.createElement(\"li\",{class:styles.f},/*#__PURE__*/React.createElement(\"img\",{src:require('../Images/empire.png')}),\"    Target Node\"),/*#__PURE__*/React.createElement(\"li\",{class:styles.f},/*#__PURE__*/React.createElement(\"img\",{src:require('../Images/light.png')}),\"    Shortest Path Node\"),/*#__PURE__*/React.createElement(\"li\",{class:styles.f},/*#__PURE__*/React.createElement(\"img\",{src:require('../Images/DarkVader.png')}),\"   Wall Node\"))));}}]);return PathfindingVisualizer;}(Component);export{PathfindingVisualizer as default};var getInitialGrid=function getInitialGrid(){var grid=[];for(var row=0;row<20;row++){var currentRow=[];for(var col=0;col<50;col++){currentRow.push(createNode(col,row));}grid.push(currentRow);}return grid;};var createNode=function createNode(col,row){return{col:col,row:row,isStart:row===START_NODE_ROW&&col===START_NODE_COL,isFinish:row===FINISH_NODE_ROW&&col===FINISH_NODE_COL,distance:Infinity,isVisited:false,isWall:false,previousNode:null};};var getNewGridWithWallToggled=function getNewGridWithWallToggled(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];var newNode=_objectSpread({},node,{isWall:!node.isWall});newGrid[row][col]=newNode;return newGrid;};","map":{"version":3,"sources":["/home/susmitha/pathfinding-visualizer/src/Visualizers/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","styles","nodeStyles","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","grid","mouseIsPressed","getInitialGrid","setState","row","col","newGrid","getNewGridWithWallToggled","visitedNodesInOrder","nodesInShortestPathOrder","start","document","getElementById","className","node","nodeStart","i","length","setTimeout","animateShortestPath","nodeVisited","nodeShortestPath","stop","nodeFinish","startNode","finishNode","animateDijkstra","componentDidMount","body","navbar","ul","starwarslogo","require","text","a","window","location","reload","nav","button","visualizeDijkstra","clearBoard","map","rowIdx","nodeIdx","isFinish","isStart","isWall","handleMouseDown","handleMouseEnter","handleMouseUp","footer","f","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport styles from './PathfindingVisualizer.module.css';\nimport nodeStyles from'./Node/Node.module.css';\n\nconst START_NODE_ROW = 3;\nconst START_NODE_COL = 8;\nconst FINISH_NODE_ROW = 15;\nconst FINISH_NODE_COL = 44;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    const start = nodesInShortestPathOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeVisited}`;\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 1; i < nodesInShortestPathOrder.length-1; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeShortestPath}`;\n      }, 50 * i);\n    }\n    const start = nodesInShortestPathOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    const stop = nodesInShortestPathOrder[nodesInShortestPathOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeFinish}`;\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n\n  clearBoard(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    for (let i =0; i<visitedNodesInOrder.length; i++){\n      const node = visitedNodesInOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.node}`;\n    }\n    const start = visitedNodesInOrder[0];\n    document.getElementById(`node-${start.row}-${start.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeStart}`;\n    const stop = visitedNodesInOrder[visitedNodesInOrder.length-1];\n    document.getElementById(`node-${stop.row}-${stop.col}`).className =\n          `${nodeStyles.node} ${nodeStyles.nodeFinish}`;\n    this.componentDidMount();\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <body class={styles.body}>\n      <div class={styles.navbar}>\n        <ul class={styles.ul}>\n          <li class={styles.starwarslogo}><img src={require('../Images/starwars.png')} /> </li>\n          <li class={styles.text}><a class={styles.a}onClick={() => window.location.reload()}> Maze Runner </a></li>\n          <li class={styles.nav}><button class={styles.button} onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button></li>\n          <li class={styles.nav }><a class={styles.a} onClick={() => this.clearBoard()}>\n          Clear Board\n        </a></li>\n        </ul>\n      </div>\n        <div className={styles.grid}>\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <div class={styles.footer}>\n          <ul class={styles.ul}>\n            <li class={styles.f}><img src={require('../Images/spaceship.png')} />    Start Node</li>\n            <li class={styles.f}><img src={require('../Images/empire.png')} />    Target Node</li>\n            <li class={styles.f}><img src={require('../Images/light.png')} />    Shortest Path Node</li>\n            <li class={styles.f}><img src={require('../Images/DarkVader.png')} />   Wall Node</li>\n          </ul>\n        </div>\n      </body>\n    );\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}